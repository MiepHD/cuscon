apply plugin: 'com.android.application'

android {
    dependenciesInfo {
        includeInApk = false
        includeInBundle = false
    }
    compileSdk rootProject.ext.CompileSdk

    defaultConfig {
        applicationId 'com.froxot.cuscon'
        minSdkVersion rootProject.ext.MinSdk
        targetSdkVersion rootProject.ext.TargetSdk
        versionCode 4054
        versionName '4.0.5.4'
        multiDexEnabled true

        // Naming app bundles
        setArchivesBaseName("${parent.name}-v${versionCode}")
    }

    bundle {
        language { enableSplit false }
    }

    signingConfigs {
        release {
            storeFile file("upload-keystore.jks")
            storePassword System.getenv("RELEASE_STORE_PASSWORD")
            keyAlias System.getenv("RELEASE_KEY_ALIAS")
            keyPassword System.getenv("RELEASE_KEY_PASSWORD")
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            debuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            signingConfig null
        }
    }
    
    flavorDimensions "variant"
	productFlavors {
		play {
			dimension "variant"
			resValue "string", "app_name", "cuscon"
			matchingFallbacks = ["play"]
		}
		foss {
			dimension "variant"
			applicationIdSuffix '.foss'
			resValue "string", "app_name", "cuscon"
			matchingFallbacks = ["foss"]
		}
	}

    sourceSets {
        play {
            java.srcDirs = ['src/play/java/']
            res.srcDirs = ["src/play/res/"]
            manifest.srcFile "play/AndroidManifest.xml"
        }
        foss {
            java.srcDirs = ['src/foss/java/']
            manifest.srcFile "foss/AndroidManifest.xml"
        }
    }
    namespace 'com.froxot.cuscon'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

dependencies {
	playImplementation 'com.github.zixpo:candybar:3.21.1'
	fossImplementation 'com.github.Donnnno:candybar-foss:3.21.2'
}

// Code for automatically copying appfilter.xml and drawable.xml
// from `res/xml` directory to `assets` directory
task copyXMLs {
    ['appfilter.xml', 'drawable.xml'].each {file ->
        copy {
            from "$projectDir/src/main/res/xml/$file"
            into "$projectDir/src/main/assets/"
        }
    }
}

tasks.configureEach { task ->
    if (task.name == 'assembleDebug' || task.name == 'assembleRelease') {
        task.dependsOn copyXMLs
    }
}